plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'com.modrinth.minotaur'
    id 'io.github.CDAGaming.cursegradle'
    id 'fabric-loom' version '1.1-SNAPSHOT'
}

base {
    archivesName = "${mod_id}-fabric"
}

repositories {
    maven {
        name = 'TarraformersMC'
        url = 'https://maven.terraformersmc.com/releases'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
    }

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modApi "com.terraformersmc:modmenu:${modmenu_version}"

    modImplementation "com.diontryban.ash:ash_api-fabric:${ash_version}"

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    implementation project(':common')
}

loom {
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('run')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('run')
        }
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    if (project(':common').file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(':common').file("src/main/resources/${mod_id}.accesswidener"))
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(':common').sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(':common').sourceSets.main.allJava)
}
tasks.named('sourcesJar', Jar) {
    from project(':common').sourceSets.main.resources
}

processResources {
    from project(':common').sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }

    repositories {
        maven {
            url 'file://' + System.getenv('local_maven')
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_id
    versionNumber = "${project.version}-fabric"
    versionName = "[Fabric ${project.minecraft_version}] v${project.mod_version}"
    versionType = project.version_type
    changelog = rootProject.file('MINI_CHANGELOG.md').text
    uploadFile = remapJar
    gameVersions = project.game_versions.split(',').toList()
    loaders = ['fabric']
    dependencies {
        required.project 'ash-api'
    }
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_TOKEN')
    project {
        id = project.curseforge_id
        releaseType = project.version_type
        changelog = rootProject.file('MINI_CHANGELOG.md').text
        changelogType = 'markdown'
        mainArtifact(remapJar) {
            it.displayName = "[Fabric ${project.minecraft_version}] v${project.mod_version}"
        }
        addGameVersion 'Fabric'
        if (project.is_client.toBoolean()) { addGameVersion 'Client' }
        if (project.is_server.toBoolean()) { addGameVersion 'Server' }
        addGameVersion project.java_version
        project.game_versions.split(',').each { addGameVersion it }
        relations {
            it.requiredDependency 'ash-api'
        }
    }
}
